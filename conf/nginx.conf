events {
  worker_connections 1024;
}

worker_processes 2;

http {  
  include       mime.types;
  default_type  text/plain;
  server_tokens off;	# hide server version
  sendfile      off;
  resolver 114.114.114.114;
  
  # lua config
  # ensure lua_code_cache on when prod :);
  lua_code_cache on;

  lua_package_path "$prefix/lua/vendor/?.lua;;";
  lua_package_cpath "$prefix/lua/vendor/?.so;;";

  lua_socket_connect_timeout 10s;
  lua_socket_read_timeout 10s;
  lua_socket_send_timeout 10s;

  # init_worker_by_lua_file lua/init_worker.lua;

  # lua_shared_dict cache 100M;

  # # limit_req_zone config
  # limit_req_zone $binary_remote_addr zone=static:10m rate=30r/s;
  # limit_req_status 429; # when over max req num, return 429

  underscores_in_headers on; # sppourt costom headers
  # reformat access logs
  # log_format access '$http_ali_cdn_real_ip - $remote_user [$time_local] "$request"' ' $status $body_bytes_sent "$http_referer"' ' "$http_user_agent"';

  server {
    listen 80;
    # listen 443 ssl http2;

    if ( $time_iso8601 ~ "^(\d{4}-\d{2}-\d{2})") {
      set $time $1;
    }

    # logs will stored in $/prefix/logs/
    # access_log logs/report-$time.log access;
    access_log logs/access.log;
    error_log  logs/error.log;

    location ~ ^/api/(\w+)$ {
      set $path $1;
      content_by_lua_file lua/api/$path.lua;
      # header_filter_by_lua_file lua/utils/cors.lua;
    }

    location / {
      root html;
      # limie_req zone=static burst=10 nodelay;
      try_files $uri $uri/ /index.html;
    }
  }
}
